<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- 自动扫描该包 -->
    <context:component-scan base-package="com.jt"/>


    <!-- mvc注解驱动
        会自动注册DefaultAnnotationHandlerMapping与
        AnnotationMethodHandlerAdapter 两个bean,
        是spring MVC为@Controllers分发请求所必须的。-->
    <mvc:annotation-driven/>
    <!-- 配置DRUID连接池 -->
    <util:properties id="cfg" location="classpath:config.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" lazy-init="false">
        <property name="driverClassName" value="#{cfg.driver}"/>
        <property name="url" value="#{cfg.url}"/>
        <property name="username" value="#{cfg.username}"/>
        <property name="password" value="#{cfg.password}"/>
    </bean>
    <!-- 整合mybatis配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-configs.xml"/>
        <!--<property name="mapperLocations" value="classpath*:mapper/**/*Mapper.xml"/>-->
    </bean>
    <!-- 配置mybatis接口映射对象的扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jt.**.dao "/>
    </bean>
    <!-- 视图解析器配置 -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".html"></property>
    </bean>
    
    <!-- 配置用户验证及权限realm -->
    <bean id="sysUserRealm" class="com.jt.sys.service.realm.ShiroUserRealm" init-method="">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
            </bean>
        </property>
    </bean>
    <!-- 配置securityManager,shiro的核心 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="sysUserRealm"/>
    </bean>

    <!-- 配置验证与授权缓存（后期一般都用redis，不再用这个） -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- 配置验证过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 传入安全管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 过滤到后要进入的登陆页面 -->
        <property name="loginUrl" value="/loginUI.do"/>
        <!-- 过滤规则 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 对静态资源容许匿名访问，也就是不登陆就访问 -->
                /bower_components/** = anon
                /build/** = anon
                /dist/** = anon
                /plugins/** = anon
                /doLogin.do = anon
                <!-- 退出 -->
                /logout.do = logout  <!-- 会调用Subject的logout方法,此方法会将session清空 -->
                <!-- 剩余其他路径，必须认证通过才可以访问 -->
                /** = authc
            </value>
        </property>
    </bean>

    <!--Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--启用shiro注解权限检查-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>




